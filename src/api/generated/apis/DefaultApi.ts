/* tslint:disable */
/* eslint-disable */
/**
 * ETN Device Checker Test
 * Simple API for the Device Checker application, used to manage borrowed mobile phones.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  EditPhone,
  EditPhoneFromJSON,
  EditPhoneToJSON,
  LoginData,
  LoginDataFromJSON,
  LoginDataToJSON,
  Phone,
  PhoneFromJSON,
  PhoneToJSON,
  User,
  UserFromJSON,
  UserToJSON,
  UserWithToken,
  UserWithTokenFromJSON,
  UserWithTokenToJSON,
} from "../models";

export interface LoginPostRequest {
  loginData?: LoginData;
}

export interface PhonesGetRequest {
  authToken: string;
}

export interface PhonesIdBorrowPostRequest {
  authToken: string;
  id: string;
}

export interface PhonesIdDeleteRequest {
  authToken: string;
  id: string;
}

export interface PhonesIdGetRequest {
  authToken: string;
  id: string;
}

export interface PhonesIdPutRequest {
  authToken: string;
  id: string;
  editPhone?: EditPhone;
}

export interface PhonesIdReturnPostRequest {
  authToken: string;
  id: string;
}

export interface PhonesPostRequest {
  authToken: string;
  editPhone?: EditPhone;
}

export interface UsersIdGetRequest {
  authToken: string;
  id: number;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/login`
   * Log in an user
   */
  async loginPostRaw(
    requestParameters: LoginPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<UserWithToken>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/login`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: LoginDataToJSON(requestParameters.loginData),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserWithTokenFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/login`
   * Log in an user
   */
  async loginPost(
    requestParameters: LoginPostRequest,
    initOverrides?: RequestInit
  ): Promise<UserWithToken> {
    const response = await this.loginPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones`
   * Get all phones.
   */
  async phonesGetRaw(
    requestParameters: PhonesGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Array<Phone>>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(PhoneFromJSON)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones`
   * Get all phones.
   */
  async phonesGet(
    requestParameters: PhonesGetRequest,
    initOverrides?: RequestInit
  ): Promise<Array<Phone>> {
    const response = await this.phonesGetRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14/borrow`
   * Borrow a phone by its ID.
   */
  async phonesIdBorrowPostRaw(
    requestParameters: PhonesIdBorrowPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Phone>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesIdBorrowPost."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling phonesIdBorrowPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones/{id}/borrow`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PhoneFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14/borrow`
   * Borrow a phone by its ID.
   */
  async phonesIdBorrowPost(
    requestParameters: PhonesIdBorrowPostRequest,
    initOverrides?: RequestInit
  ): Promise<Phone> {
    const response = await this.phonesIdBorrowPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14`
   * Delete a phone by its ID.
   */
  async phonesIdDeleteRaw(
    requestParameters: PhonesIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesIdDelete."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling phonesIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14`
   * Delete a phone by its ID.
   */
  async phonesIdDelete(
    requestParameters: PhonesIdDeleteRequest,
    initOverrides?: RequestInit
  ): Promise<void> {
    await this.phonesIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14`
   * Get data for a phone by its ID.
   */
  async phonesIdGetRaw(
    requestParameters: PhonesIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Phone>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesIdGet."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling phonesIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PhoneFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14`
   * Get data for a phone by its ID.
   */
  async phonesIdGet(
    requestParameters: PhonesIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<Phone> {
    const response = await this.phonesIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14`
   * Edit a phone by its ID.
   */
  async phonesIdPutRaw(
    requestParameters: PhonesIdPutRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Phone>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesIdPut."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling phonesIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: EditPhoneToJSON(requestParameters.editPhone),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PhoneFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14`
   * Edit a phone by its ID.
   */
  async phonesIdPut(
    requestParameters: PhonesIdPutRequest,
    initOverrides?: RequestInit
  ): Promise<Phone> {
    const response = await this.phonesIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14/borrow`
   * Return a phone by its ID.
   */
  async phonesIdReturnPostRaw(
    requestParameters: PhonesIdReturnPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Phone>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesIdReturnPost."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling phonesIdReturnPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones/{id}/return`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PhoneFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones/14/borrow`
   * Return a phone by its ID.
   */
  async phonesIdReturnPost(
    requestParameters: PhonesIdReturnPostRequest,
    initOverrides?: RequestInit
  ): Promise<Phone> {
    const response = await this.phonesIdReturnPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones`
   * Add a new phone.
   */
  async phonesPostRaw(
    requestParameters: PhonesPostRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<Phone>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling phonesPost."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/phones`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: EditPhoneToJSON(requestParameters.editPhone),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PhoneFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/phones`
   * Add a new phone.
   */
  async phonesPost(
    requestParameters: PhonesPostRequest,
    initOverrides?: RequestInit
  ): Promise<Phone> {
    const response = await this.phonesPostRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/users/2`
   * Get user data using an user id.
   */
  async usersIdGetRaw(
    requestParameters: UsersIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<User>> {
    if (
      requestParameters.authToken === null ||
      requestParameters.authToken === undefined
    ) {
      throw new runtime.RequiredError(
        "authToken",
        "Required parameter requestParameters.authToken was null or undefined when calling usersIdGet."
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling usersIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      requestParameters.authToken !== undefined &&
      requestParameters.authToken !== null
    ) {
      headerParameters["Auth-Token"] = String(requestParameters.authToken);
    }

    const response = await this.request(
      {
        path: `/users/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserFromJSON(jsonValue)
    );
  }

  /**
   * **Example URL:** `https://js-test-api.etnetera.cz/api/v1/users/2`
   * Get user data using an user id.
   */
  async usersIdGet(
    requestParameters: UsersIdGetRequest,
    initOverrides?: RequestInit
  ): Promise<User> {
    const response = await this.usersIdGetRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
